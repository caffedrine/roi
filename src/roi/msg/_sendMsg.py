# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roi/sendMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import roi.msg
import sensor_msgs.msg

class sendMsg(genpy.Message):
  _md5sum = "b81ee14b2a1fb34ae211ed812f1ab031"
  _type = "roi/sendMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#FRAME data structure; defined in FRAME.msg
sensor_msgs/Image image

#IMU data structure; defined in IMU.msg
IMU imu

#Region of interest data structure; defined in ROIS.msg
ROIS rois

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: roi/IMU
#IMU Data, we may have to pass those infos too!

bool isValidIMU
sensor_msgs/Imu imu

================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: roi/ROIS
#Numar regiuni de interes
uint32 nr

#Vector de lungime variabila cu regiunile de interes
sensor_msgs/RegionOfInterest[] rois

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify
"""
  __slots__ = ['image','imu','rois']
  _slot_types = ['sensor_msgs/Image','roi/IMU','roi/ROIS']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       image,imu,rois

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sendMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.imu is None:
        self.imu = roi.msg.IMU()
      if self.rois is None:
        self.rois = roi.msg.ROIS()
    else:
      self.image = sensor_msgs.msg.Image()
      self.imu = roi.msg.IMU()
      self.rois = roi.msg.ROIS()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image.height, _x.image.width))
      _x = self.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image.is_bigendian, _x.image.step))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.imu.isValidIMU, _x.imu.imu.header.seq, _x.imu.imu.header.stamp.secs, _x.imu.imu.header.stamp.nsecs))
      _x = self.imu.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.imu.imu.orientation.x, _x.imu.imu.orientation.y, _x.imu.imu.orientation.z, _x.imu.imu.orientation.w))
      buff.write(_struct_9d.pack(*self.imu.imu.orientation_covariance))
      _x = self
      buff.write(_struct_3d.pack(_x.imu.imu.angular_velocity.x, _x.imu.imu.angular_velocity.y, _x.imu.imu.angular_velocity.z))
      buff.write(_struct_9d.pack(*self.imu.imu.angular_velocity_covariance))
      _x = self
      buff.write(_struct_3d.pack(_x.imu.imu.linear_acceleration.x, _x.imu.imu.linear_acceleration.y, _x.imu.imu.linear_acceleration.z))
      buff.write(_struct_9d.pack(*self.imu.imu.linear_acceleration_covariance))
      buff.write(_struct_I.pack(self.rois.nr))
      length = len(self.rois.rois)
      buff.write(_struct_I.pack(length))
      for val1 in self.rois.rois:
        _x = val1
        buff.write(_struct_4IB.pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.imu is None:
        self.imu = roi.msg.IMU()
      if self.rois is None:
        self.rois = roi.msg.ROIS()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.height, _x.image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.encoding = str[start:end].decode('utf-8')
      else:
        self.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.is_bigendian, _x.image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.imu.isValidIMU, _x.imu.imu.header.seq, _x.imu.imu.header.stamp.secs, _x.imu.imu.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.imu.isValidIMU = bool(self.imu.isValidIMU)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.imu.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu.imu.orientation.x, _x.imu.imu.orientation.y, _x.imu.imu.orientation.z, _x.imu.imu.orientation.w,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 72
      self.imu.imu.orientation_covariance = _struct_9d.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu.imu.angular_velocity.x, _x.imu.imu.angular_velocity.y, _x.imu.imu.angular_velocity.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.imu.imu.angular_velocity_covariance = _struct_9d.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu.imu.linear_acceleration.x, _x.imu.imu.linear_acceleration.y, _x.imu.imu.linear_acceleration.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.imu.imu.linear_acceleration_covariance = _struct_9d.unpack(str[start:end])
      start = end
      end += 4
      (self.rois.nr,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rois.rois = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.RegionOfInterest()
        _x = val1
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _struct_4IB.unpack(str[start:end])
        val1.do_rectify = bool(val1.do_rectify)
        self.rois.rois.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image.height, _x.image.width))
      _x = self.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image.is_bigendian, _x.image.step))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.imu.isValidIMU, _x.imu.imu.header.seq, _x.imu.imu.header.stamp.secs, _x.imu.imu.header.stamp.nsecs))
      _x = self.imu.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.imu.imu.orientation.x, _x.imu.imu.orientation.y, _x.imu.imu.orientation.z, _x.imu.imu.orientation.w))
      buff.write(self.imu.imu.orientation_covariance.tostring())
      _x = self
      buff.write(_struct_3d.pack(_x.imu.imu.angular_velocity.x, _x.imu.imu.angular_velocity.y, _x.imu.imu.angular_velocity.z))
      buff.write(self.imu.imu.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_struct_3d.pack(_x.imu.imu.linear_acceleration.x, _x.imu.imu.linear_acceleration.y, _x.imu.imu.linear_acceleration.z))
      buff.write(self.imu.imu.linear_acceleration_covariance.tostring())
      buff.write(_struct_I.pack(self.rois.nr))
      length = len(self.rois.rois)
      buff.write(_struct_I.pack(length))
      for val1 in self.rois.rois:
        _x = val1
        buff.write(_struct_4IB.pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.imu is None:
        self.imu = roi.msg.IMU()
      if self.rois is None:
        self.rois = roi.msg.ROIS()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.height, _x.image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.encoding = str[start:end].decode('utf-8')
      else:
        self.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.is_bigendian, _x.image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.imu.isValidIMU, _x.imu.imu.header.seq, _x.imu.imu.header.stamp.secs, _x.imu.imu.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.imu.isValidIMU = bool(self.imu.isValidIMU)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.imu.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu.imu.orientation.x, _x.imu.imu.orientation.y, _x.imu.imu.orientation.z, _x.imu.imu.orientation.w,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 72
      self.imu.imu.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu.imu.angular_velocity.x, _x.imu.imu.angular_velocity.y, _x.imu.imu.angular_velocity.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.imu.imu.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu.imu.linear_acceleration.x, _x.imu.imu.linear_acceleration.y, _x.imu.imu.linear_acceleration.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.imu.imu.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 4
      (self.rois.nr,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rois.rois = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.RegionOfInterest()
        _x = val1
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _struct_4IB.unpack(str[start:end])
        val1.do_rectify = bool(val1.do_rectify)
        self.rois.rois.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9d = struct.Struct("<9d")
_struct_BI = struct.Struct("<BI")
_struct_3I = struct.Struct("<3I")
_struct_B3I = struct.Struct("<B3I")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_4IB = struct.Struct("<4IB")
_struct_3d = struct.Struct("<3d")
