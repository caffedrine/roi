/* Auto-generated by genmsg_cpp for file /home/curiosul/ROS_Workspace/sandbox/roi/msg/ROIS.msg */
#ifndef ROI_MESSAGE_ROIS_H
#define ROI_MESSAGE_ROIS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/RegionOfInterest.h"

namespace roi
{
template <class ContainerAllocator>
struct ROIS_ {
  typedef ROIS_<ContainerAllocator> Type;

  ROIS_()
  : nr(0)
  , rois()
  {
  }

  ROIS_(const ContainerAllocator& _alloc)
  : nr(0)
  , rois(_alloc)
  {
  }

  typedef uint32_t _nr_type;
  uint32_t nr;

  typedef std::vector< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::other >  _rois_type;
  std::vector< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::other >  rois;


  typedef boost::shared_ptr< ::roi::ROIS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roi::ROIS_<ContainerAllocator>  const> ConstPtr;
}; // struct ROIS
typedef  ::roi::ROIS_<std::allocator<void> > ROIS;

typedef boost::shared_ptr< ::roi::ROIS> ROISPtr;
typedef boost::shared_ptr< ::roi::ROIS const> ROISConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roi::ROIS_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roi::ROIS_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roi

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roi::ROIS_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roi::ROIS_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roi::ROIS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c6b1a3b2f390bd44cdbe0b0a182aebc3";
  }

  static const char* value(const  ::roi::ROIS_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc6b1a3b2f390bd44ULL;
  static const uint64_t static_value2 = 0xcdbe0b0a182aebc3ULL;
};

template<class ContainerAllocator>
struct DataType< ::roi::ROIS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roi/ROIS";
  }

  static const char* value(const  ::roi::ROIS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roi::ROIS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Numar regiuni de interes\n\
uint32 nr\n\
\n\
#Vector de lungime variabila cu regiunile de interes\n\
sensor_msgs/RegionOfInterest[] rois\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
";
  }

  static const char* value(const  ::roi::ROIS_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roi::ROIS_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.nr);
    stream.next(m.rois);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ROIS_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roi::ROIS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roi::ROIS_<ContainerAllocator> & v) 
  {
    s << indent << "nr: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nr);
    s << indent << "rois[]" << std::endl;
    for (size_t i = 0; i < v.rois.size(); ++i)
    {
      s << indent << "  rois[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "    ", v.rois[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROI_MESSAGE_ROIS_H

